from aiogram import Router, types, F
from handlers.start import allowed_users

router = Router()

FAQ_ENTRIES = {
    "–¥–æ—Å—Ç–∞–≤–∫–∞": "üì¶ –ú—ã –¥–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –≤—Å–µ–π —Å—Ç—Ä–∞–Ω–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 2‚Äì5 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π.",
    "–æ–ø–ª–∞—Ç–∞": "üí≥ –û–ø–ª–∞—Ç–∞ –≤–æ–∑–º–æ–∂–Ω–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–ª–∏ –æ–Ω–ª–∞–π–Ω —á–µ—Ä–µ–∑ –∫–∞—Ä—Ç—É.",
    "–≤–æ–∑–≤—Ä–∞—Ç": "üîÅ –í–æ–∑–≤—Ä–∞—Ç –≤–æ–∑–º–æ–∂–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 14 –¥–Ω–µ–π —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞.",
}

@router.message(F.text == "/faq")
async def show_faq(message: types.Message):
    user_id = message.from_user.id

    if user_id not in allowed_users:
        await message.answer("‚õî –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –≥—Ä—É–ø–ø—É.")
        return
    
    text = "‚ùì <b>–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:</b>\n\n"
    for key in FAQ_ENTRIES:
        text += f"‚Ä¢ {key.capitalize()}\n"
    text += "\n–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç."
    await message.answer(text)

@router.message(F.text.lower().in_(FAQ_ENTRIES.keys()))
async def answer_faq(message: types.Message):
    response = FAQ_ENTRIES.get(message.text.lower())
    await message.answer(response)

def register(dp):
    dp.include_router(router)
