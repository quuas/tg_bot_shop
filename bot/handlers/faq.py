from aiogram import Router, types, F
from handlers.start import allowed_users
from aiogram.types import InlineQuery
from aiogram.types.inline_query_result_article import InlineQueryResultArticle
from aiogram.types.input_text_message_content import InputTextMessageContent
from uuid import uuid4
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

router = Router()

FAQ_ENTRIES = {
    "–¥–æ—Å—Ç–∞–≤–∫–∞": "üì¶ –ú—ã –¥–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –≤—Å–µ–π —Å—Ç—Ä–∞–Ω–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 2‚Äì5 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π.",
    "–æ–ø–ª–∞—Ç–∞": "üí≥ –û–ø–ª–∞—Ç–∞ –≤–æ–∑–º–æ–∂–Ω–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–ª–∏ –æ–Ω–ª–∞–π–Ω —á–µ—Ä–µ–∑ –∫–∞—Ä—Ç—É.",
    "–≤–æ–∑–≤—Ä–∞—Ç": "üîÅ –í–æ–∑–≤—Ä–∞—Ç –≤–æ–∑–º–æ–∂–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 14 –¥–Ω–µ–π —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞.",
}

@router.message(F.text == "/faq")
async def show_faq(message: types.Message):
    user_id = message.from_user.id

    if user_id not in allowed_users:
        await message.answer("‚õî –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –≥—Ä—É–ø–ø—É.")
        return

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üì¶ –î–æ—Å—Ç–∞–≤–∫–∞", switch_inline_query_current_chat="–¥–æ—Å—Ç–∞–≤–∫–∞")],
            [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∞", switch_inline_query_current_chat="–æ–ø–ª–∞—Ç–∞")],
            [InlineKeyboardButton(text="üîÅ –í–æ–∑–≤—Ä–∞—Ç", switch_inline_query_current_chat="–≤–æ–∑–≤—Ä–∞—Ç")]
        ]
    )

    await message.answer(
        "‚ùì –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ:",
        reply_markup=keyboard
    )

@router.inline_query()
async def inline_faq(query: InlineQuery):
    user_input = query.query.strip().lower()
    results = []

    for keyword, answer in FAQ_ENTRIES.items():
        if keyword in user_input:
            results.append(
                InlineQueryResultArticle(
                    id=str(uuid4()),
                    title=keyword.capitalize(),
                    description=answer[:50],
                    input_message_content=InputTextMessageContent(message_text=answer)
                )
            )

    if not results:
        results.append(
            InlineQueryResultArticle(
                id=str(uuid4()),
                title="‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                input_message_content=InputTextMessageContent(
                    message_text="–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
                )
            )
        )

    await query.answer(results, cache_time=1, is_personal=True)

def register(dp):
    dp.include_router(router)
